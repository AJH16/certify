<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz"
             xmlns:local="clr-namespace:Certify.UI.Controls"
             xmlns:certifyui="clr-namespace:Certify.UI"
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             xmlns:Custom="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:utils="clr-namespace:Certify.UI.Utils"
             xmlns:model="clr-namespace:Certify.Models;assembly=Certify.Models"
             xmlns:Resources="clr-namespace:Certify.Locales;assembly=Certify.Locales"
             x:Class="Certify.UI.Controls.ManagedItemSettings"
             mc:Ignorable="d" Width="697.442" Height="425.672"
             d:DataContext="{d:DesignInstance Type=certifyui:DesignViewModel, IsDesignTimeCreatable=True}">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="0"></RowDefinition>
            <RowDefinition Height="32"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
            <utils:InverseBooleanConverter x:Key="InvBoolConverter" />
            <utils:OptionalBooleanToVisibilityConverter True="Collapsed" False="Visible" x:Key="InvBoolVisConverter" />
            <utils:NullVisibilityConverter x:Key="NullCollapsedConverter" />
            <utils:ManagedItemHealthVisibilityConverter x:Key="HealthVisibleConverter" />
            <utils:NullVisibilityConverter x:Key="NullVisibleConverter" Null="Visible" NotNull="Collapsed" />
        </Grid.Resources>

        <!-- managed item summary title and close button -->
        <StackPanel Orientation="Vertical" Grid.Row="0" Visibility="Collapsed">
            <Grid Margin="0,0,4,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="32"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" Content="{Binding SelectedItem.Name}" Margin="8,0,0,2" FontSize="24" FontFamily="Segoe UI Semilight" Padding="5,0" />
                <Button Grid.Column="1" x:Name="Dismiss" Click="Dismiss_Click" ToolTip="Dismiss" Background="White" Margin="4,4,0,4" VerticalAlignment="Top" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}">
                    <StackPanel Orientation="Horizontal">
                        <fa:ImageAwesome Grid.Column="1" Height="16" Width="16" Icon="WindowClose" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                    </StackPanel>
                </Button>
            </Grid>

            <Label Content="{Binding ValidationError}" Margin="8,0,0,0" />
        </StackPanel>

        <!-- save/request buttons-->
        <StackPanel Orientation="Horizontal" Height="32" Grid.Row="1">

            <Button  IsEnabled="{Binding SelectedItem.IsChanged}" Click="Button_Save" Margin="8,0,0,0">
                <StackPanel Orientation="Horizontal">
                    <fa:ImageAwesome Icon="Save" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource AccentColorBrush3}" />
                    <TextBlock Margin="8,0,0,0" VerticalAlignment="Center"><Run Text="{x:Static Resources:SR.Save}" /></TextBlock>
                </StackPanel>
            </Button>

            <Button  IsEnabled="{Binding SelectedItem.IsChanged}" Click="Button_DiscardChanges" Margin="8,0,0,0">
                <StackPanel Orientation="Horizontal">
                    <fa:ImageAwesome Icon="Undo" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource AccentColorBrush3}" />
                    <TextBlock Margin="8,0,0,0" VerticalAlignment="Center"><Run Text="{x:Static Resources:SR.DiscardChanges}" /></TextBlock>
                </StackPanel>
            </Button>

            <Button Click="Button_Delete" Margin="8,0,0,0">
                <StackPanel Orientation="Horizontal">
                    <fa:ImageAwesome Icon="Trash" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource AccentColorBrush3}" />
                    <TextBlock Margin="8,0,0,0" VerticalAlignment="Center"><Run Text="{x:Static Resources:SR.Delete}" /></TextBlock>
                </StackPanel>
            </Button>

            <Button IsEnabled="{Binding IsSelectedItemValid}" Click="Button_RequestCertificate" Margin="16,0,0,0">
                <StackPanel Orientation="Horizontal">
                    <fa:ImageAwesome Icon="Play" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource AccentColorBrush3}" />
                    <TextBlock Margin="8,0,0,0" VerticalAlignment="Center"><Run Text="{x:Static Resources:SR.ManagedItemSettings_RequestCertificate}" /></TextBlock>
                </StackPanel>
            </Button>
        </StackPanel>

        <!--settings tabs-->
        <dragablz:TabablzControl x:Name="SettingsTab" Margin="8" Grid.Row="2" FixedHeaderCount="3"
                                 VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
            <TabItem Header="{x:Static Resources:SR.ManagedItemSettings_Tab_Options}" IsSelected="True">

                <!--general settings and domain options-->
                <DockPanel Margin="12,12,12,0" Visibility="{Binding SelectedItem, Converter={StaticResource ResourceKey=NullCollapsedConverter}}">

                    <StackPanel DockPanel.Dock="Top" x:Name="GeneralOptions" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Margin="2,0,0,0">
                        <!-- Renewal warning messages-->
                        <StackPanel Orientation="Horizontal" Visibility="{Binding SelectedItem.Health, Converter={StaticResource ResourceKey=HealthVisibleConverter}}" Background="#FF3F3F3F" Margin="0,0,0,8">
                            <fa:ImageAwesome Margin="4" Icon="ExclamationTriangle" Height="16" Foreground="#FFFDFDFD" />
                            <TextBlock TextWrapping="WrapWithOverflow" Text="{Binding SelectedItem.RenewalFailureMessage}" Margin="4,4,16,4" Foreground="White">
                            </TextBlock>
                        </StackPanel>

                        <!-- Managed Item display name-->
                        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="0,8,0,0">
                            <Label Width="136" Content="{x:Static Resources:SR.ManagedItemSettings_DisplayName}" />
                            <TextBox Text="{Binding SelectedItem.Name, UpdateSourceTrigger=PropertyChanged}" Width="225" />
                        </StackPanel>

                        <!-- General Options-->
                        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="4,8,0,4">
                            <CheckBox Content="{x:Static Resources:SR.ManagedItemSettings_EnableAutoRenewal}" IsChecked="{Binding SelectedItem.IncludeInAutoRenew}" Margin="136,0,8,0" />
                            <CheckBox Content="{x:Static Resources:SR.ManagedItemSettings_NotifyPrimaryContactOnRenewalFailure}" IsChecked="{Binding SelectedItem.RequestConfig.EnableFailureNotifications}" />
                        </StackPanel>
                    </StackPanel>

                    <ScrollViewer DockPanel.Dock="Bottom">
                        <!-- domain options-->
                        <StackPanel Margin="0,8,0,0">
                            <TextBlock Style="{StaticResource Subheading}" >Domains and Validation</TextBlock>

                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                                <TextBlock Padding="4,4,4,4"  TextWrapping="WrapWithOverflow" VerticalAlignment="Top"  Margin="8,0" FontWeight="Normal" FontFamily="Segoe UI" HorizontalAlignment="Left"><Run Text="Which domains do you want to include in your certificate and how will you validate your control of them? You can select domain from hostname bindings on an existing website and/or add domains manually. These must all be domains where you can validate control either via DNS or by creating a required file on the website." /></TextBlock>
                                <Button Style="{DynamicResource MetroCircleButtonStyle}" Width="32" Height="32">
                                    <fa:ImageAwesome Icon="Question" Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource AccentColorBrush3}" />
                                </Button>
                            </StackPanel>

                            <dragablz:TabablzControl x:Name="DomainsTab" Margin="8" FixedHeaderCount="3"
                                 VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
                                <TabItem Header="Domains" IsSelected="True">

                                    <local:ManagedItemSettingsDomains Visibility="Visible" Margin="0,8,0,0" />
                                </TabItem>
                                <TabItem Header="Validation" IsSelected="True">

                                    <local:ManagedItemSettingsValidation Visibility="Visible" Margin="0,8,0,0" />
                                </TabItem>
                            </dragablz:TabablzControl>
                        </StackPanel>
                    </ScrollViewer>
                </DockPanel>
            </TabItem>
            <TabItem Header="{x:Static Resources:SR.Advanced}" IsSelected="True">
                <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                    <StackPanel Margin="12">
                        <StackPanel Orientation="Horizontal">
                            <Label Width="160" Content="{x:Static Resources:SR.ManagedItemSettings_ChallengeTypes}" />
                            <ComboBox ItemsSource="{Binding ChallengeTypes}" SelectedItem="{Binding SelectedItem.RequestConfig.ChallengeType}" Width="225" />
                            <Button Name="Button_TestChallenge" Content="{x:Static Resources:SR.Test}" Margin="4,0,0,0" Click="TestChallenge_Click" />
                            <fa:ImageAwesome x:Name="TestInProgress" Margin="4,0,0,0" Visibility="Hidden" Icon="Refresh" Height="16" Spin="True" SpinDuration="1" />
                        </StackPanel>

                        <StackPanel>
                            <StackPanel.Style>
                                <Style>
                                    <Setter Property="StackPanel.Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedItem.RequestConfig.ChallengeType}" Value="{x:Static model:SupportedChallengeTypes.CHALLENGE_TYPE_HTTP}">
                                            <Setter Property="StackPanel.Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                                <Label Width="160" Content="{x:Static Resources:SR.ManagedItemSettings_WebsiteRoot}" />
                                <TextBox Text="{Binding SelectedItem.RequestConfig.WebsiteRootPath}" Width="350" />
                                <Button Name="Button_WebRoot" Content="{x:Static Resources:SR.ManagedItemSettings_BrowseFolder}" Margin="4,0,0,0" Click="DirectoryBrowse_Click" />
                            </StackPanel>

                            <StackPanel Orientation="Vertical" Margin="4,8,0,0">
                                <CheckBox Content="{x:Static Resources:SR.ManagedItemSettings_PerformChallengeResponseConfigCheck}" IsChecked="{Binding SelectedItem.RequestConfig.PerformExtensionlessConfigChecks}" />
                                <CheckBox Content="{x:Static Resources:SR.ManagedItemSettings_PerformWebAppAutoConfig}" IsChecked="{Binding SelectedItem.RequestConfig.PerformAutoConfig}" />
                            </StackPanel>
                        </StackPanel>

                        <StackPanel>
                            <StackPanel.Style>
                                <Style>
                                    <Setter Property="StackPanel.Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedItem.RequestConfig.ChallengeType}" Value="{x:Static model:SupportedChallengeTypes.CHALLENGE_TYPE_DNS}">
                                            <Setter Property="StackPanel.Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                                <Label Width="160" Content="API Provider:" />
                                <StackPanel Orientation="Vertical">
                                    <ComboBox x:Name="ChallengeProviderList" DisplayMemberPath="Title" Width="255" SelectedValuePath="Id" SelectedValue="{Binding SelectedItem.RequestConfig.ChallengeProvider}" />

                                    <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                                        <ComboBox x:Name="StoredCredentialList" Width="225" ItemsSource="{Binding StoredCredentials}" DisplayMemberPath="Title" SelectedValuePath="StorageKey" SelectedValue="{Binding SelectedItem.RequestConfig.ChallengeCredentialKey}" />

                                        <Button x:Name="AddStoredCredential" Margin="8,0,0,0" Content="New" Click="AddStoredCredential_Click">
                                        </Button>
                                    </StackPanel>
                                </StackPanel>
                            </StackPanel>
                        </StackPanel>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style>
                                    <Setter Property="StackPanel.Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedItem.RequestConfig.ChallengeType}" Value="{x:Static model:SupportedChallengeTypes.CHALLENGE_TYPE_SNI}">
                                            <Setter Property="StackPanel.Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <StackPanel Orientation="Vertical" Margin="4,8,0,0">
                                <CheckBox Content="{x:Static Resources:SR.ManagedItemSettings_PerformChallengeResponseConfigCheck}" IsChecked="{Binding SelectedItem.RequestConfig.PerformTlsSniBindingConfigChecks}" />
                            </StackPanel>
                        </StackPanel>

                        <StackPanel Orientation="Vertical" Margin="4,16,0,0">
                            <RadioButton IsChecked="{Binding SelectedItem.RequestConfig.PerformAutomatedCertBinding}" GroupName="BindingType" Content="{x:Static Resources:SR.ManagedItemSettings_AutoUpdateBinding}" />
                            <RadioButton IsChecked="{Binding SelectedItem.RequestConfig.PerformAutomatedCertBinding, Mode=OneWay, Converter={StaticResource ResourceKey=InvBoolConverter}}" GroupName="BindingType" Content="{x:Static Resources:SR.ManagedItemSettings_UseSpecificBinding}" />
                        </StackPanel>

                        <StackPanel Orientation="Vertical" IsEnabled="{Binding SelectedItem.RequestConfig.PerformAutomatedCertBinding, Converter={StaticResource ResourceKey=InvBoolConverter}}" Margin="32,8,0,0">
                            <StackPanel Orientation="Horizontal">
                                <Label Width="131" Content="{x:Static Resources:SR.ManagedItemSettings_BindIP}" />
                                <ComboBox ItemsSource="{Binding HostIPAddresses}" DisplayMemberPath="Description" SelectedValue="{Binding SelectedItem.RequestConfig.BindingIPAddress}" SelectedValuePath="IPAddress" Width="225" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Width="131" Content="{x:Static Resources:SR.ManagedItemSettings_BindPort}" />
                                <TextBox Text="{Binding SelectedItem.RequestConfig.BindingPort}" Width="225" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Width="131" Content="{x:Static Resources:SR.ManagedItemSettings_UseSNI}" />
                                <CheckBox IsChecked="{Binding SelectedItem.RequestConfig.BindingUseSNI}"></CheckBox>
                            </StackPanel>
                            <Label Content="{x:Static Resources:SR.ManagedItemSettings_BindingNote}" />
                        </StackPanel>

                        <StackPanel Orientation="Vertical" Margin="0,16,0,0">
                            <StackPanel Orientation="Horizontal">
                                <Label Width="155" Content="{x:Static Resources:SR.ManagedItemSettings_PerRequsetScript}" />
                                <TextBox Text="{Binding SelectedItem.RequestConfig.PreRequestPowerShellScript}" Width="350" />
                                <Button Name="Button_PreRequest" Content="{x:Static Resources:SR.Browser}" Margin="4,0,0,0" Click="FileBrowse_Click" />
                                <Button Name="Button_TestPreRequest" Content="{x:Static Resources:SR.Test}" Margin="4,0,0,0" Click="TestScript_Click" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="0,4,0,0">
                                <Label Width="155" Content="{x:Static Resources:SR.ManagedItemSettings_PostRequestScript}" />
                                <TextBox Text="{Binding SelectedItem.RequestConfig.PostRequestPowerShellScript}" Width="350" />
                                <Button Name="Button_PostRequest" Content="{x:Static Resources:SR.Browser}" Margin="4,0,0,0" Click="FileBrowse_Click" />
                                <Button Name="Button_TestPostRequest" Content="{x:Static Resources:SR.Test}" Margin="4,0,0,0" Click="TestScript_Click" />
                            </StackPanel>
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0">
                            <Label Width="155" Content="{x:Static Resources:SR.ManagedItemSettings_HookTrigger}" />
                            <ComboBox ItemsSource="{Binding WebhookTriggerTypes}" SelectedItem="{Binding SelectedItem.RequestConfig.WebhookTrigger}" Width="150" />
                            <Border>
                                <Border.Style>
                                    <Style>
                                        <Setter Property="Border.Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedItem.RequestConfig.WebhookTrigger}" Value="{x:Static model:Webhook.ON_NONE}">
                                                <Setter Property="Border.Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                                <Button Name="Button_TestWebhook" Content="{x:Static Resources:SR.Test}" Margin="4,0,0,0" Click="TestWebhook_Click" />
                            </Border>
                        </StackPanel>
                        <StackPanel Background="#efefef" Margin="46,8,12,12" Width="520" HorizontalAlignment="Left">
                            <StackPanel.Style>
                                <Style>
                                    <Setter Property="StackPanel.Visibility" Value="Visible" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedItem.RequestConfig.WebhookTrigger}" Value="{x:Static model:Webhook.ON_NONE}">
                                            <Setter Property="StackPanel.Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <Grid Margin="8,8,12,8">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="100" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Label Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" Content="{x:Static Resources:SR.ManagedItemSettings_HookUrl}" />
                                <TextBox Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" Controls:TextBoxHelper.Watermark="https://example.org/api/controller?domain=$PrimaryDomain" Text="{Binding SelectedItem.RequestConfig.WebhookUrl}" Margin="0,0,0,4" />

                                <Label Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Content="{x:Static Resources:SR.ManagedItemSettings_HookMethod}" />
                                <ComboBox Grid.Row="1" Grid.Column="1" HorizontalAlignment="Left" ItemsSource="{x:Static model:Webhook.Methods}" SelectedItem="{Binding SelectedItem.RequestConfig.WebhookMethod}" Width="100" Margin="0,0,0,4" />

                                <Grid Grid.Row="2" Grid.ColumnSpan="2" Margin="0">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="100" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.Style>
                                        <Style>
                                            <Setter Property="Grid.Visibility" Value="Collapsed" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedItem.RequestConfig.WebhookMethod}" Value="{x:Static model:Webhook.METHOD_POST}">
                                                    <Setter Property="StackPanel.Visibility" Value="Visible" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>

                                    <Label Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" Content="{x:Static Resources:SR.ManagedItemSettings_HookContentType}" />
                                    <TextBox Grid.Row="0" Grid.Column="1" HorizontalAlignment="Left" Controls:TextBoxHelper.Watermark="application/json" Width="200" Text="{Binding SelectedItem.RequestConfig.WebhookContentType}" Margin="0,0,0,4" />

                                    <Label Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Content="{x:Static Resources:SR.ManagedItemSettings_HookBody}" />
                                    <TextBox Grid.Row="1" Grid.Column="1" HorizontalAlignment="Stretch" Height="150" Text="{Binding SelectedItem.RequestConfig.WebhookContentBody}" TextWrapping="Wrap" AcceptsReturn="True" Margin="0,0,0,4" Controls:TextBoxHelper.Watermark="{x:Static model:Webhook.DEFAULT_BODY}" />
                                </Grid>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static Resources:SR.Info}" IsSelected="True">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <StackPanel Orientation="Vertical" Margin="12">
                        <DockPanel Margin="0,0,0,12">
                            <Label Content="{x:Static Resources:SR.Comments}" />
                            <TextBox Height="50">
                                <TextBox.Text>
                                    <Binding  Path="SelectedItem.Comments" UpdateSourceTrigger="PropertyChanged" />
                                </TextBox.Text>
                            </TextBox>
                        </DockPanel>
                        <Button x:Name="OpenLogFile" Content="{x:Static Resources:SR.ManagedItemSettings_OpenLogFile}" Click="OpenLogFile_Click" Width="250" HorizontalAlignment="Right" />
                        <Label x:Name="CertPath" Content="{Binding SelectedItem.CertificatePath, TargetNullValue={x:Static Resources:SR.ManagedItemSettings_CertificatePathEmpty}}" />
                        <Button x:Name="OpenCertificateFile" Content="{x:Static Resources:SR.ManagedItemSettings_ViewCertificate}" Click="OpenCertificateFile_Click" Width="250" HorizontalAlignment="Right" />
                        <Button x:Name="ReapplyCertBindings" Content="{x:Static Resources:SR.ManagedItemSettings_ReapplyCertificate}" Click="ReapplyCertBindings_Click" Width="250" Margin="0,4,0,0" HorizontalAlignment="Right" />
                        <Label Content="{x:Static Resources:SR.ManagedItemSettings_ExportTip}" />
                        <Border>
                            <Border.Style>
                                <Style>
                                    <Setter Property="Border.Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedItem.CertificateRevoked}" Value="False">
                                            <Setter Property="Border.Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Button x:Name="RevokeCertificateBtn" Content="{x:Static Resources:SR.ManagedItemSettings_RevokeCertificate}" Click="RevokeCertificateBtn_Click" Background="#FFFFC7C7" Width="250" HorizontalAlignment="Right" />
                        </Border>
                        <Border>
                            <Border.Style>
                                <Style>
                                    <Setter Property="Border.Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedItem.CertificateRevoked}" Value="True">
                                            <Setter Property="Border.Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Label Content="{x:Static Resources:SR.ManagedItemSettings_CertificateRevokeWarning}" Background="#FFFFC7C7" />
                        </Border>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
        </dragablz:TabablzControl>
    </Grid>
</UserControl>